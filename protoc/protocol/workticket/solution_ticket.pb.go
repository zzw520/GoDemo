// Code generated by protoc-gen-go. DO NOT EDIT.
// source: workticket/solution_ticket.proto

package workticket

import (
	solution "app/protoc/protocol/solution"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("workticket/solution_ticket.proto", fileDescriptor_20e2885273bd34a2)
}

var fileDescriptor_20e2885273bd34a2 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0xcf, 0x2f, 0xca,
	0x2e, 0xc9, 0x4c, 0xce, 0x4e, 0x2d, 0xd1, 0x2f, 0xce, 0xcf, 0x29, 0x2d, 0xc9, 0xcc, 0xcf, 0x8b,
	0x87, 0xf0, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xb8, 0x10, 0x2a, 0xa4, 0xc4, 0x61, 0x4a,
	0xe0, 0x6a, 0x21, 0x8a, 0xa4, 0xe4, 0x90, 0x8c, 0x49, 0xce, 0xcf, 0xcd, 0x45, 0x33, 0xc4, 0x68,
	0x05, 0x23, 0x17, 0x47, 0x30, 0x54, 0x8b, 0x90, 0x2f, 0x17, 0x1f, 0x8c, 0xed, 0x5c, 0x94, 0x9a,
	0x58, 0x92, 0x2a, 0x24, 0xaf, 0x07, 0x37, 0x0f, 0x26, 0xe3, 0x92, 0x5a, 0x92, 0x98, 0x99, 0x13,
	0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x25, 0xa5, 0x87, 0xb0, 0x40, 0x2f, 0x3c, 0xbf, 0x28,
	0x3b, 0x04, 0xcc, 0x0c, 0x4a, 0x2d, 0x2e, 0x40, 0x36, 0x2e, 0xb4, 0x20, 0x85, 0x52, 0xe3, 0x9c,
	0x14, 0xa2, 0xe4, 0x12, 0x0b, 0x0a, 0xf4, 0xc1, 0xee, 0x4e, 0x86, 0x52, 0xf9, 0x39, 0xfa, 0x08,
	0x0d, 0x49, 0x6c, 0x60, 0x41, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x53, 0x7b, 0xfe, 0x57,
	0x3c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SolutionClient is the client API for Solution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SolutionClient interface {
	SolutionCreate(ctx context.Context, in *solution.SolutionDetailRequest, opts ...grpc.CallOption) (*WorkTicketResp, error)
	SolutionUpdate(ctx context.Context, in *solution.SolutionDetailRequest, opts ...grpc.CallOption) (*WorkTicketResp, error)
}

type solutionClient struct {
	cc grpc.ClientConnInterface
}

func NewSolutionClient(cc grpc.ClientConnInterface) SolutionClient {
	return &solutionClient{cc}
}

func (c *solutionClient) SolutionCreate(ctx context.Context, in *solution.SolutionDetailRequest, opts ...grpc.CallOption) (*WorkTicketResp, error) {
	out := new(WorkTicketResp)
	err := c.cc.Invoke(ctx, "/workticket.Solution/SolutionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solutionClient) SolutionUpdate(ctx context.Context, in *solution.SolutionDetailRequest, opts ...grpc.CallOption) (*WorkTicketResp, error) {
	out := new(WorkTicketResp)
	err := c.cc.Invoke(ctx, "/workticket.Solution/SolutionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolutionServer is the server API for Solution service.
type SolutionServer interface {
	SolutionCreate(context.Context, *solution.SolutionDetailRequest) (*WorkTicketResp, error)
	SolutionUpdate(context.Context, *solution.SolutionDetailRequest) (*WorkTicketResp, error)
}

// UnimplementedSolutionServer can be embedded to have forward compatible implementations.
type UnimplementedSolutionServer struct {
}

func (*UnimplementedSolutionServer) SolutionCreate(ctx context.Context, req *solution.SolutionDetailRequest) (*WorkTicketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionCreate not implemented")
}
func (*UnimplementedSolutionServer) SolutionUpdate(ctx context.Context, req *solution.SolutionDetailRequest) (*WorkTicketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolutionUpdate not implemented")
}

func RegisterSolutionServer(s *grpc.Server, srv SolutionServer) {
	s.RegisterService(&_Solution_serviceDesc, srv)
}

func _Solution_SolutionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(solution.SolutionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionServer).SolutionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workticket.Solution/SolutionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionServer).SolutionCreate(ctx, req.(*solution.SolutionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Solution_SolutionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(solution.SolutionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionServer).SolutionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workticket.Solution/SolutionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionServer).SolutionUpdate(ctx, req.(*solution.SolutionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Solution_serviceDesc = grpc.ServiceDesc{
	ServiceName: "workticket.Solution",
	HandlerType: (*SolutionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolutionCreate",
			Handler:    _Solution_SolutionCreate_Handler,
		},
		{
			MethodName: "SolutionUpdate",
			Handler:    _Solution_SolutionUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workticket/solution_ticket.proto",
}
